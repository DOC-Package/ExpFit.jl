var documenterSearchIndex = {"docs":
[{"location":"expred/#Exponential-Model-Reduction","page":"Exponential Model Reduction","title":"Exponential Model Reduction","text":"","category":"section"},{"location":"expfit/#Exponential-Fitting","page":"Exponential Fitting","title":"Exponential Fitting","text":"","category":"section"},{"location":"expfit/#Exponentials","page":"Exponential Fitting","title":"Exponentials","text":"","category":"section"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"First, we introduce ExpFit.Exponentials type.  This type contains two fields: Exponents and coefficients of a sum of exponentials.  Let us show you how to use it.","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"We define an instance using exponent and coefficient.","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"exponent = [1.0 + 2.0im, 3.0 + 4.0im]\ncoefficient = [5.0 + 6.0im, 7.0 + 8.0im]\nef = Exponentials(exponent, coefficient)","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"The instance ef contains the exponents and coefficients.","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"julia> ef.expon\n2-element Vector{ComplexF64}:\n 1.0 + 2.0im\n 3.0 + 4.0im\njulia> ef.coeff\n2-element Vector{ComplexF64}:\n 5.0 + 6.0im\n 7.0 + 8.0im","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"ef also has a method and can be used as a function that returns sum(ef.coeff .* exp.(-ef.expon .* (t-t0)))","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"julia> f = t -> ef(t)\n#1 (generic function with 1 method)\n\njulia> g = t -> ef(t, 1.0)\n#3 (generic function with 1 method)","category":"page"},{"location":"expfit/#expfit","page":"Exponential Fitting","title":"expfit","text":"","category":"section"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"As an example to demonstrate how to use the expfit function, consider approximating a Bessel function with a sum of exponentials. The following is the code. ","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"sing LinearAlgebra\nusing ExpFit\nusing SpecialFunctions\n\ntmin = 0.0\ntmax  = 50.0      \ntol = 1e-3     \nN = 100\nf = t -> besselj(0,t) + 1.0im*besselj(1,t)\nef = expfit(f, tmin, tmax, N, tol)\nprint(\"Approximation order = \", length(ef.coeff), \"\\n\")\n\nt = range(tmin, tmax, length=N*2)\nfv = f.(t)\nefv = ef.(t)\nerr = abs.(efv .- fv)\nprintln(\"Root mean square = \", norm(err)/sqrt(N))","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"Here, tmin and tmax specify the range used for the approximation, N is the number of sample points, and tol is the tolerance. ef is the instance of ExpFit.Exponentials.","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"When executed, the terminal will display the following.","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"Approximation order = 6\nRoot mean square = 0.0005937677782521255","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"The Bessel function was approximated with six terms.","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"The results are also illustrated below. (Image: result1)","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"We observe that the absolute error delta f(t) is within the tolerance.","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"As an alternative use case, equally spaced discrete data can be input into the expfit function. Here, dt represents the time interval.","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"dt = (tmax-tmin) / (N-1)\nfv = f.(t)\nef = expfit(fv, dt, tol)","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"Additionally, the approximation order can be set instead of the tolerance.","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"order = 10\nef = expfit(f, tmin, tmax, N, order)\nef = expfit(fv, dt, order)","category":"page"},{"location":"expfit/#Algorithms","page":"Exponential Fitting","title":"Algorithms","text":"","category":"section"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"The default algorithm used in expfit is ESPRIT algorithm.   If you want use a different algorithm, you can set the alg option  as","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"ef = expfit(fv, dt, tol; alg=ESPIRA1())","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"Available algorithms and corresponding options are shown below.","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"alg=ESPRIT()\nalg=Pencil()\nalg=Prony()\nalg=ESPIRA1()\nalg=ESPIRA2()\nalg=FastESPRIT()","category":"page"},{"location":"expfit/","page":"Exponential Fitting","title":"Exponential Fitting","text":"Please see Reference for all the available methods.","category":"page"},{"location":"reference/#Reference","page":"References","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"References","title":"References","text":"DocTestSetup = quote\n  using Polynomials\nend","category":"page"},{"location":"reference/#Inspection","page":"References","title":"Inspection","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"Modules = [ExpFit]","category":"page"},{"location":"reference/#ExpFit.Exponentials","page":"References","title":"ExpFit.Exponentials","text":"Exponentials <: AbstractExpFit\n\nA type representing a sum of exponentials of the form\n\nf(t) = ∑ cᵢ exp(-aᵢ(t-t₀))\n\nwhere aᵢ and cᵢ are the exponents and coefficients of the sum, respectively.\n\nFields\n\nexpon::AbstractVector{<:Number}: The exponents aᵢ of the sum of exponentials.\ncoeff::AbstractVector{<:Number}: The coefficients cᵢ of the sum of exponentials.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ExpFit.balanced_truncation-Tuple{AbstractVector{<:Number}, AbstractVector{<:Number}, Float64}","page":"References","title":"ExpFit.balanced_truncation","text":"balanced_truncation(a::AbstractVector{<:Number}, c::AbstractVector{<:Number}, eps::Float64) :: Exponentials\n\nGiven the exponents a and coefficients c of a sum of exponentials, compute a new sum of exponentials with a reduced number of terms for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.balanced_truncation-Tuple{AbstractVector{<:Number}, AbstractVector{<:Number}, Int64}","page":"References","title":"ExpFit.balanced_truncation","text":"balanced_truncation(a::AbstractVector{<:Number}, c::AbstractVector{<:Number}, M::Int) :: Exponentials\n\nGiven the exponents a and coefficients c of a sum of exponentials, compute a new sum of exponentials with a given number of terms M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.espira1-Tuple{AbstractVector{<:Number}, Real, Int64}","page":"References","title":"ExpFit.espira1","text":"espira1(f::Vector{<:Number}, dt::Real, M::Int) :: Exponentials\n\nPerform the ESPIRA-I algorithm using discrete data f and the sampling interval dt for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.espira1-Tuple{AbstractVector{<:Number}, Real, Real}","page":"References","title":"ExpFit.espira1","text":"espira1(f::Vector{<:Number}, dt::Real, eps::Real) :: Exponentials\n\nPerform the ESPIRA-I algorithm using discrete data f and the sampling interval dt for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.espira1-Tuple{Function, Real, Real, Int64, Int64}","page":"References","title":"ExpFit.espira1","text":"espira1(func::Function, tmin::Real, tmax::Real, nsamples::Int, M::Int) :: Exponentials\n\nPerform the ESPIRA-I algorithm using a function func in the range [tmin,tmax] and nsamples sampling points for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.espira1-Tuple{Function, Real, Real, Int64, Real}","page":"References","title":"ExpFit.espira1","text":"espira1(func::Function, tmin::Real, tmax::Real, nsamples::Int, eps::Real) :: Exponentials\n\nPerform the ESPIRA-I algorithm using a function func in the range [tmin,tmax] and nsamples sampling points for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.espira1-Tuple{Function, Real, Real, Real, Int64}","page":"References","title":"ExpFit.espira1","text":"espira1(func::Function, tmin::Real, tmax::Real, dt::Real, M::Int) :: Exponentials\n\nPerform the ESPIRA-I algorithm using a function func in the range [tmin,tmax] and a sampling interval dt for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.espira1-Tuple{Function, Vararg{Real, 4}}","page":"References","title":"ExpFit.espira1","text":"espira1(func::Function, tmin::Real, tmax::Real, dt::Real, eps::Real) :: Exponentials\n\nPerform the ESPIRA-I algorithm using a function func in the range [tmin,tmax] and a sampling interval dt for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.espira2-Tuple{AbstractVector{<:Number}, Real, Int64}","page":"References","title":"ExpFit.espira2","text":"espira2(f::Vector{<:Number}, dt::Real, M::Int) :: Exponentials\n\nPerform the ESPIRA-II algorithm using discrete data f and the sampling interval dt for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.espira2-Tuple{AbstractVector{<:Number}, Real, Real}","page":"References","title":"ExpFit.espira2","text":"espira2(f::Vector{<:Number}, dt::Real, eps::Real)  :: Exponentials\n\nPerform the ESPIRA-II algorithm using discrete data f and the sampling interval dt for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.espira2-Tuple{Function, Real, Real, Int64, Int64}","page":"References","title":"ExpFit.espira2","text":"espira2(func::Function, tmin::Real, tmax::Real, nsamples::Int, M::Int) :: Exponentials\n\nPerform the ESPIRA-II algorithm using a function func in the range [tmin,tmax] and nsamples sampling points for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.espira2-Tuple{Function, Real, Real, Int64, Real}","page":"References","title":"ExpFit.espira2","text":"espira2(func::Function, tmin::Real, tmax::Real, nsamples::Int, eps::Real) :: Exponentials\n\nPerform the ESPIRA-II algorithm using a function func in the range [tmin,tmax] and nsamples sampling points for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.espira2-Tuple{Function, Real, Real, Real, Int64}","page":"References","title":"ExpFit.espira2","text":"espira2(func::Function, tmin::Real, tmax::Real, dt::Real, M::Int) :: Exponentials\n\nPerform the ESPIRA-II algorithm using a function func in the range [tmin,tmax] and a sampling interval dt for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.espira2-Tuple{Function, Vararg{Real, 4}}","page":"References","title":"ExpFit.espira2","text":"espira2(func::Function, tmin::Real, tmax::Real, dt::Real, eps::Real) :: Exponentials\n\nPerform the ESPIRA-II algorithm using a function func in the range [tmin,tmax] and a sampling interval dt for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.esprit-Tuple{AbstractVector{<:Number}, Real, Int64}","page":"References","title":"ExpFit.esprit","text":"esprit(hk::Vector{<:Number}, dt::Real, M::Int; ncols::Union{Int,Nothing}=nothing) :: Exponentials\n\nPerform the ESPRIT algorithm using discrete data hk and the sampling interval dt for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.esprit-Tuple{AbstractVector{<:Number}, Real, Real}","page":"References","title":"ExpFit.esprit","text":"esprit(hk::AbstractVector{<:Number}, dt::Real, eps::Real; ncols::Union{Int,Nothing}=nothing) :: Exponentials\n\nPerform the ESPRIT algorithm using discrete data hk and the sampling interval dt for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.esprit-Tuple{Function, Real, Real, Int64, Int64}","page":"References","title":"ExpFit.esprit","text":"esprit(func::Function, tmin::Real, tmax::Real, nsamples::Int, M::Int; ncols::Union{Int,Nothing}=nothing) :: Exponentials\n\nPerform the ESPRIT algorithm using a function func in the range [tmin,tmax] and nsamples sampling points for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.esprit-Tuple{Function, Real, Real, Int64, Real}","page":"References","title":"ExpFit.esprit","text":"esprit(func::Function, tmin::Real, tmax::Real, nsamples::Int, eps::Real; ncols::Union{Int,Nothing}=nothing) :: Exponentials\n\nPerform the ESPRIT algorithm using a function func in the range [tmin,tmax] and nsamples sampling points for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.esprit-Tuple{Function, Real, Real, Real, Int64}","page":"References","title":"ExpFit.esprit","text":"esprit(func::Function, tmin::Real, tmax::Real, dt::Real, M::Int; ncols::Union{Int,Nothing}=nothing) :: Exponentials\n\nPerform the ESPRIT algorithm using a function func in the range [tmin,tmax] and a sampling interval dt for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.esprit-Tuple{Function, Vararg{Real, 4}}","page":"References","title":"ExpFit.esprit","text":"esprit(func::Function, tmin::Real, tmax::Real, dt::Real, eps::Real; ncols::Union{Int,Nothing}=nothing) :: Exponentials\n\nPerform the ESPRIT algorithm using a function func in the range [tmin,tmax] and a sampling interval dt for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.expfit-Tuple{AbstractVector{<:Number}, Int64}","page":"References","title":"ExpFit.expfit","text":"expfit(f::AbstractVector{<:Number}, dt::Real, M::Int; alg::AbstractExpFit=ESPRIT()) :: Exponentials\n\nEstimate the exponents and coefficients of the sum of exponentials for the function f using the algorithm alg.\n\nArguments\n\nf::AbstractVector{<:Number}: The samples of the function.\ndt::Real: The sampling interval.\nM::Int: The model order.\nalg::AbstractExpFit=ESPRIT(): The algorithm to use for the estimation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.expfit-Tuple{AbstractVector{<:Number}, Real, Real}","page":"References","title":"ExpFit.expfit","text":"expfit(f::AbstractVector{<:Number}, dt::Real, eps::Real; alg::AbstractExpFit=ESPRIT()) :: Exponentials\n\nEstimate the exponents and coefficients of the sum of exponentials for the function f using the algorithm alg.\n\nArguments\n\nf::AbstractVector{<:Number}: The samples of the function.\ndt::Real: The sampling interval.\neps::Real: The tolerance for the algorithm.\nalg::AbstractExpFit=ESPRIT(): The algorithm to use for the estimation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.expfit-Tuple{Function, Real, Real, Int64, Int64}","page":"References","title":"ExpFit.expfit","text":"expfit(f::AbstractVector{<:Number}, dt::Real, eps::Real; alg::AbstractExpFit=ESPRIT()) :: Exponentials\n\nEstimate the exponents and coefficients of the sum of exponentials for the function f using the algorithm alg.\n\nArguments\n\nf::AbstractVector{<:Number}: The samples of the function.\ndt::Real: The sampling interval.\neps::Real: The tolerance for the algorithm.\nalg::AbstractExpFit=ESPRIT(): The algorithm to use for the estimation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.expfit-Tuple{Function, Real, Real, Int64, Real}","page":"References","title":"ExpFit.expfit","text":"expfit(func::Function, tmin::Real, tmax::Real, nsamples::Int, eps::Real; alg::AbstractExpFit=ESPRIT()) :: Exponentials\n\nEstimate the exponents and coefficients of the sum of exponentials for the function func using the algorithm alg.\n\nArguments\n\nfunc::Function: The function to estimate the exponents and coefficients.\ntmin::Real: The initial time.\ntmax::Real: The final time.\nnsamples::Int: The number of samples to take in the interval [tmin, tmax].\neps::Real: The tolerance for the algorithm.\nalg::AbstractExpFit=ESPRIT(): The algorithm to use for the estimation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.expfit-Tuple{Function, Real, Real, Real, Int64}","page":"References","title":"ExpFit.expfit","text":"expfit(func::Function, tmin::Real, tmax::Real, dt::Real, M::Int; alg::AbstractExpFit=ESPRIT()) :: Exponentials\n\nEstimate the exponents and coefficients of the sum of exponentials for the function func using the algorithm alg.\n\nArguments\n\nfunc::Function: The function to estimate the exponents and coefficients.\ntmin::Real: The initial time.\ntmax::Real: The final time.\ndt::Real: The sampling interval.\nM::Int: The model order.\nalg::AbstractExpFit=ESPRIT(): The algorithm to use for the estimation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.expfit-Tuple{Function, Vararg{Real, 4}}","page":"References","title":"ExpFit.expfit","text":"expfit(func::Function, tmin::Real, tmax::Real, dt::Real, eps::Real; alg::AbstractExpFit=ESPRIT()) :: Exponentials\n\nEstimate the exponents and coefficients of the sum of exponentials for the function func using the algorithm alg.\n\nArguments\n\nfunc::Function: The function to estimate the exponents and coefficients.\ntmin::Real: The initial time.\ntmax::Real: The final time.\ndt::Real: The sampling interval.\neps::Real: The tolerance for the algorithm.\nalg::AbstractExpFit=ESPRIT(): The algorithm to use for the estimation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.expred-Tuple{AbstractVector{<:Number}, AbstractVector{<:Number}, Int64}","page":"References","title":"ExpFit.expred","text":"expred(a::AbstractVector{<:Number}, c::AbstractVector{<:Number}, M::Int) :: Exponentials\n\nFinding a new set of exponents and coefficients for the sum of exponentials using the balanced truncation method.\n\nArguments\n\na::AbstractVector{<:Number}: The exponents aᵢ of the sum of exponentials.\nc::AbstractVector{<:Number}: The coefficients cᵢ of the sum of exponentials.\nM::Int: The model order.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.expred-Tuple{AbstractVector{<:Number}, AbstractVector{<:Number}, Real}","page":"References","title":"ExpFit.expred","text":"expred(a::AbstractVector{<:Number}, c::AbstractVector{<:Number}, eps::Real) :: Exponentials\n\nFinding a new set of exponents and coefficients for the sum of exponentials using the balanced truncation method.\n\nArguments\n\na::AbstractVector{<:Number}: The exponents aᵢ of the sum of exponentials.\nc::AbstractVector{<:Number}: The coefficients cᵢ of the sum of exponentials.\neps::Real: The tolerance for the balanced truncation method.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.fast_esprit-Tuple{AbstractVector{<:Number}, Real, Int64}","page":"References","title":"ExpFit.fast_esprit","text":"fast_esprit(hk::Vector{<:Number}, dt::Real, M::Int) :: Exponentials\n\nPerform the Fast ESPRIT algorithm using discrete data hk and the sampling interval dt for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.fast_esprit-Tuple{AbstractVector{<:Number}, Real, Real}","page":"References","title":"ExpFit.fast_esprit","text":"fast_esprit(hk::Vector{<:Number}, dt::Real, eps::Real) :: Exponentials\n\nPerform the Fast ESPRIT algorithm using discrete data hk and the sampling interval dt for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.fast_esprit-Tuple{Function, Real, Real, Int64, Int64}","page":"References","title":"ExpFit.fast_esprit","text":"fast_esprit(func::Function, tmin::Real, tmax::Real, nsamples::Int, M::Int) :: Exponentials\n\nPerform the Fast ESPRIT algorithm using a function func in the range [tmin,tmax] and nsamples sampling points for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.fast_esprit-Tuple{Function, Real, Real, Int64, Real}","page":"References","title":"ExpFit.fast_esprit","text":"fast_esprit(func::Function, tmin::Real, tmax::Real, nsamples::Int, eps::Real) :: Exponentials\n\nPerform the Fast ESPRIT algorithm using a function func in the range [tmin,tmax] and nsamples sampling points for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.fast_esprit-Tuple{Function, Real, Real, Real, Int64}","page":"References","title":"ExpFit.fast_esprit","text":"fast_esprit(func::Function, tmin::Real, tmax::Real, dt::Real, M::Int) :: Exponentials\n\nPerform the Fast ESPRIT algorithm using a function func in the range [tmin,tmax] and a sampling interval dt for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.fast_esprit-Tuple{Function, Vararg{Real, 4}}","page":"References","title":"ExpFit.fast_esprit","text":"fast_esprit(func::Function, tmin::Real, tmax::Real, dt::Real, eps::Real) :: Exponentials\n\nPerform the Fast ESPRIT algorithm using a function func in the range [tmin,tmax] and a sampling interval dt for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.matrix_pencil-Tuple{AbstractVector{<:Number}, Real, Int64}","page":"References","title":"ExpFit.matrix_pencil","text":"matrix_pencil(hk::Vector{<:Number}, dt::Real, M::Int; ncols::Union{Int,Nothing}=nothing) :: Exponentials\n\nPerform the matrix pencil algorithm using discrete data hk and the sampling interval dt for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.matrix_pencil-Tuple{AbstractVector{<:Number}, Real, Real}","page":"References","title":"ExpFit.matrix_pencil","text":"matrix_pencil(hk::AbstractVector{<:Number}, dt::Real, eps::Real; ncols::Union{Int,Nothing}=nothing) :: Exponentials\n\nPerform the matrix pencil algorithm using discrete data hk and the sampling interval dt for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.matrix_pencil-Tuple{Function, Real, Real, Int64, Int64}","page":"References","title":"ExpFit.matrix_pencil","text":"matrix_pencil(func::Function, tmin::Real, tmax::Real, nsamples::Int, M::Int; ncols::Union{Int,Nothing}=nothing) :: Exponentials\n\nPerform the matrix pencil algorithm using a function func in the range [tmin,tmax] and nsamples sampling points for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.matrix_pencil-Tuple{Function, Real, Real, Int64, Real}","page":"References","title":"ExpFit.matrix_pencil","text":"matrix_pencil(func::Function, tmin::Real, tmax::Real, nsamples::Int, eps::Real; ncols::Union{Int,Nothing}=nothing)\n\nPerform the matrix pencil algorithm using a function func in the range [tmin,tmax] and nsamples sampling points for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.matrix_pencil-Tuple{Function, Real, Real, Real, Int64}","page":"References","title":"ExpFit.matrix_pencil","text":"matrix_pencil(func::Function, tmin::Real, tmax::Real, dt::Real, M::Int; ncols::Union{Int,Nothing}=nothing) :: Exponentials\n\nPerform the matrix pencil algorithm using a function func in the range [tmin,tmax] and a sampling interval dt for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.matrix_pencil-Tuple{Function, Vararg{Real, 4}}","page":"References","title":"ExpFit.matrix_pencil","text":"matrix_pencil(func::Function, tmin::Real, tmax::Real, dt::Real, eps::Real; ncols::Union{Int,Nothing}=nothing) :: Exponentials\n\nPerform the matrix pencil algorithm using a function func in the range [tmin,tmax] and a sampling interval dt for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.prony-Tuple{AbstractVector{<:Number}, Real, Int64}","page":"References","title":"ExpFit.prony","text":"prony(hk::Vector{<:Number}, dt::Real, M::Int) :: Exponentials\n\nPerform the Prony method using discrete data hk and the sampling interval dt for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.prony-Tuple{AbstractVector{<:Number}, Real, Real}","page":"References","title":"ExpFit.prony","text":"prony(hk::Vector{<:Number}, dt::Real, eps::Real) :: Exponentials\n\nPerform the Prony method using discrete data hk and the sampling interval dt for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.prony-Tuple{Function, Float64, Float64, Int64, Float64}","page":"References","title":"ExpFit.prony","text":"prony(func::Function, tmin::Real, tmax::Real, nsamples::Int, eps::Real) :: Exponentials\n\nPerform the Prony method using a function func in the range [tmin,tmax] and nsamples sampling points for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.prony-Tuple{Function, Float64, Float64, Int64, Int64}","page":"References","title":"ExpFit.prony","text":"prony(func::Function, tmin::Real, tmax::Real, nsamples::Int, M::Int) :: Exponentials\n\nPerform the Prony method using a function func in the range [tmin,tmax] and nsamples sampling points for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.prony-Tuple{Function, Float64, Float64, Real, Float64}","page":"References","title":"ExpFit.prony","text":"prony(func::Function, tmin::Real, tmax::Real, dt::Real, eps::Real) :: Exponentials\n\nPerform the Prony method using a function func in the range [tmin,tmax] and a sampling interval dt for a given tolerance eps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.prony-Tuple{Function, Float64, Float64, Real, Int64}","page":"References","title":"ExpFit.prony","text":"prony(func::Function, tmin::Real, tmax::Real, dt::Real, M::Int) :: Exponentials\n\nPerform the Prony method using a function func in the range [tmin,tmax] and a sampling interval dt for a given model order M.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ExpFit","category":"page"},{"location":"#ExpFit.jl","page":"Home","title":"ExpFit.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ExpFit.jl is a Julia package that provides methods and algorithms for fitting functions or discrete data with a sum of exponentials and for reducing the order of a sum of exponentials.","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Exponential Fitting\nExponential Model Reduction\nReference","category":"page"}]
}

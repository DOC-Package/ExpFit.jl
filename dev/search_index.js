var documenterSearchIndex = {"docs":
[{"location":"expred/#Exponential-Model-Reduction","page":"Exponential Reduction","title":"Exponential Model Reduction","text":"","category":"section"},{"location":"expred/#Balanced-trunction","page":"Exponential Reduction","title":"Balanced trunction","text":"","category":"section"},{"location":"expfit/#Exponential-Fitting","page":"Exponential Fitting","title":"Exponential Fitting","text":"","category":"section"},{"location":"expfit/#Simple-usage","page":"Exponential Fitting","title":"Simple usage","text":"","category":"section"},{"location":"expfit/#Algorithms","page":"Exponential Fitting","title":"Algorithms","text":"","category":"section"},{"location":"expfit/#ESPRIT","page":"Exponential Fitting","title":"ESPRIT","text":"","category":"section"},{"location":"expfit/#Matrix-pencil","page":"Exponential Fitting","title":"Matrix pencil","text":"","category":"section"},{"location":"expfit/#Prony's-method","page":"Exponential Fitting","title":"Prony's method","text":"","category":"section"},{"location":"expfit/#ESPIRA","page":"Exponential Fitting","title":"ESPIRA","text":"","category":"section"},{"location":"expfit/#FastESPRIT","page":"Exponential Fitting","title":"FastESPRIT","text":"","category":"section"},{"location":"reference/#Reference","page":"References","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"References","title":"References","text":"DocTestSetup = quote\n  using Polynomials\nend","category":"page"},{"location":"reference/#Inspection","page":"References","title":"Inspection","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"Modules = [ExpFit]","category":"page"},{"location":"reference/#ExpFit.balanced_truncation-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, Float64}} where T<:Number","page":"References","title":"ExpFit.balanced_truncation","text":"balanced_truncation(a::Vector{ComplexF64}, c::Vector{ComplexF64}, eps::Float64)\n\nGiven the exponents a and coefficients c of an exponential fitting, compute a new exponential fitting with a reduced number of terms.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.balanced_truncation_sub-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, AbstractMatrix{ComplexF64}}} where T<:Number","page":"References","title":"ExpFit.balanced_truncation_sub","text":"balanced_truncation_sub(a::Vector{ComplexF64}, c::Vector{ComplexF64}, Um::AbstractMatrix{ComplexF64})\n\nSub function for balanced truncation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.espira1-Tuple{Vector{<:Number}, Real, Real}","page":"References","title":"ExpFit.espira1","text":"espira1\n\nThis function first computes a modified FFT of y and places knots on the unit circle. It then calls the AAA routine from RationalFunctionApproximation.jl to obtain a rational approximant of (modified) DFT data, and finally extracts the ESPIRA parameters via a partial-fraction procedure.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.espira2-Tuple{Vector{<:Number}, Real, Real}","page":"References","title":"ExpFit.espira2","text":"espira2\n\nThis function computes a shifted FFT of its input data and uses AAA to obtain a rational approximant.  It then extracts the exponential parameters by converting the resulting poles and residues into a sum of exponentials.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.esprit-Tuple{AbstractVector{<:Number}, Real, Real}","page":"References","title":"ExpFit.esprit","text":"esprit(hk, dt, eps; ncols=nothing) -> exponent, coeff\n\nPerform the ESPRIT algorithm using discrete data hk and the sampling interval dt.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.esprit_sub-Tuple{AbstractVector{<:Number}, Real}","page":"References","title":"ExpFit.esprit_sub","text":"esprit_sub(hk, eps; p=nothing)\n\nEstimate the eigenvalues γ using the ESPRIT subspace method from the Hankel matrix constructed from hk.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.fast_esprit-Tuple{AbstractVector{<:Number}, Real, Real}","page":"References","title":"ExpFit.fast_esprit","text":"fast_esprit(hk, dt, eps; ncols=nothing) -> exponent, coeff\n\nPerform the ESPRIT algorithm using discrete data hk and the sampling interval dt.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.fast_esprit_sub-Tuple{AbstractVector{<:Number}, Real}","page":"References","title":"ExpFit.fast_esprit_sub","text":"fast_esprit_sub(hk, eps; p=nothing)\n\nEstimate the eigenvalues γ using the ESPRIT subspace method from the Hankel matrix constructed from hk.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.fnrm-Tuple{AbstractVector{<:Number}}","page":"References","title":"ExpFit.fnrm","text":"fnrm(s)\n\nGeneric weighted norm computation\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.hankel_matrix-Tuple{AbstractVector{<:Number}}","page":"References","title":"ExpFit.hankel_matrix","text":"hankel_matrix(hk; q=nothing)\n\nConstruct a Hankel matrix from the discrete data hk (a vector of complex numbers).\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.matrix_pencil-Tuple{AbstractVector{<:Number}, Real, Real}","page":"References","title":"ExpFit.matrix_pencil","text":"matrix_pencil_sub(hk, dt, eps; ncols) -> γ\n\nPerform the Matrix Pencil method using discrete data hk and the sampling interval defined by [tmin, tmax].\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.matrix_pencil_sub-Tuple{AbstractVector{<:Number}, Real}","page":"References","title":"ExpFit.matrix_pencil_sub","text":"matrix_pencil_sub(hk, eps; ncols) -> γ\n\nEstimate the eigenvalues γ using the Matrix Pencil method from the Hankel matrix constructed from the discrete data hk.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ExpFit.partial_lanczos_bidiagonalization-Union{Tuple{T}, Tuple{AbstractVector{T}, Real}} where T<:Number","page":"References","title":"ExpFit.partial_lanczos_bidiagonalization","text":"Generic Partial Lanczos Bidiagonalization\n\nThis function extends partiallanczosbidiagonalization_dble to handle both real and complex input vectors s.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ExpFit","category":"page"},{"location":"#ExpFit.jl","page":"Home","title":"ExpFit.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ExpFit.","category":"page"}]
}

var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ExpFit","category":"page"},{"location":"#ExpFit","page":"Home","title":"ExpFit","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ExpFit.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ExpFit]","category":"page"},{"location":"#ExpFit.esprit-Tuple{AbstractVector{<:ComplexF64}, Real, Real}","page":"Home","title":"ExpFit.esprit","text":"esprit(hk, dt, eps; p=nothing) -> (exponent, coeff)\n\nPerform the ESPRIT algorithm using discrete data hk and the sampling interval dt.\n\nhk : Discrete data (vector of complex numbers).\ndt : Sampling interval.\neps: Threshold for singular value determination.\np  : Number of rows for the Hankel matrix (optional).\n\nReturns: A tuple containing the estimated exponents and coefficients. Note: The solution of the Vandermonde system is delegated to the function solve_vandermonde, which is assumed to be implemented elsewhere.\n\n\n\n\n\n","category":"method"},{"location":"#ExpFit.esprit-Tuple{Function, Real, Real, Int64, Real}","page":"Home","title":"ExpFit.esprit","text":"esprit(func, tmin, tmax, N, eps; p=nothing) -> (exponent, coeff)\n\nSample the function func over the interval [tmin, tmax] to create discrete data, and then perform the ESPRIT algorithm.\n\nfunc : The function to be sampled (should return a real or complex number).\ntmin, tmax : Endpoints of the sampling interval.\nN    : Number of samples (this implementation generates 2N data points).\neps  : Threshold for singular value determination.\np    : Number of rows for the Hankel matrix (optional).\n\nReturns: A tuple containing the estimated exponents and coefficients.\n\n\n\n\n\n","category":"method"},{"location":"#ExpFit.esprit_sub-Tuple{AbstractVector{<:ComplexF64}, Real}","page":"Home","title":"ExpFit.esprit_sub","text":"esprit_sub(hk, eps; p=nothing)\n\nEstimate the eigenvalues γ using the ESPRIT subspace method from the Hankel matrix constructed from hk.\n\nhk : A vector of complex data.\neps: Threshold used to distinguish noise. Singular values smaller than eps times the largest singular value are considered noise.\np  : Number of rows for the Hankel matrix (optional).\n\nReturns: A vector of eigenvalues γ.\n\n\n\n\n\n","category":"method"},{"location":"#ExpFit.hankel_matrix-Tuple{AbstractVector{<:ComplexF64}}","page":"Home","title":"ExpFit.hankel_matrix","text":"hankel_matrix(hk; p=nothing)\n\nConstruct a Hankel matrix from the discrete data hk (a vector of complex numbers).\n\nhk : Data vector (of length K).\np  : Number of rows for the Hankel matrix (optional).        If not provided, p is set to ⌊(K+1)/2⌋ and q is computed as K+1-p.\n\nReturns: A p × q Hankel matrix H such that H[i,j] = hk[i+j-1].\n\n\n\n\n\n","category":"method"}]
}
